import os
import json
import requests
from datetime import datetime
from typing import List, Dict
import resend
import anthropic
from dotenv import load_dotenv

# ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
load_dotenv()

# API ÌÇ§ Î∞è Ïù¥Î©îÏùº ÏÑ§Ï†ï
PERPLEXITY_API_KEY = os.getenv('PERPLEXITY_API_KEY')
ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY')
RESEND_API_KEY = os.getenv('RESEND_API_KEY')
EMAIL_FROM = os.getenv('EMAIL_FROM', 'ai-trends@yourdomain.com')
EMAIL_TO = os.getenv('EMAIL_TO', 'gyu3637@gmail.com')

# Resend Ï¥àÍ∏∞Ìôî
resend.api_key = RESEND_API_KEY


class AITrendAnalyzer:
    """Perplexity ‚Üí Claude ‚Üí E-mail ÌååÏù¥ÌîÑÎùºÏù∏"""

    def __init__(self):
        self.news_items: List[Dict] = []  # Perplexity JSON
        self.sources: List[str] = []      # URL Î¶¨Ïä§Ìä∏
        self.final_post: str = ''         # Claude Í≤∞Í≥º (Markdown)
        self.debug_info: Dict = {}

    # -----------------------------
    # 1) Perplexity: Ïò§ÎäòÏùò Îâ¥Ïä§ Í≤ÄÏÉâ
    # -----------------------------
    def search_news_with_perplexity(self) -> List[Dict]:
        """Perplexity APIÎ°ú Ïò§ÎäòÏùò AI/Tech Îâ¥Ïä§ 5Í∞úÎ•º JSON Î∞∞Ïó¥Î°ú ÏàòÏßë"""
        headers = {
            'Authorization': f'Bearer {PERPLEXITY_API_KEY}',
            'Content-Type': 'application/json'
        }

        prompt = (
            """Find today's top 5 AI and tech news that would interest startup founders and developers.\n"""
            """Return ONLY a valid JSON array with objects: {title, summary, implications, url}.\n"""
            """Focus on launches, open-source, funding, breakthroughs, APIs, dev tools.\n"""
            """Avoid corporate PR and vague announcements."""
        )

        payload = {
            "model": "sonar",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.2,
            "max_tokens": 2000
        }

        try:
            resp = requests.post(
                'https://api.perplexity.ai/chat/completions',
                headers=headers,
                json=payload,
                timeout=30
            )
            resp.raise_for_status()
            content = resp.json()['choices'][0]['message']['content'].strip()

            # ÏΩîÎìúÌéúÏä§ Ï†úÍ±∞
            if content.startswith('```'):
                content = content.split('\n', 1)[1].rsplit('```', 1)[0].strip()

            self.news_items = json.loads(content)
            self.sources = [item['url'] for item in self.news_items]
            self.debug_info['news_count'] = len(self.news_items)
            return self.news_items
        except Exception as e:
            print(f"‚ùå Perplexity Ïò§Î•ò: {e}")
            raise

    # -----------------------------
    # 2) Claude: Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ ÏÉùÏÑ± (Í∞úÏÑ†Îêú ÌîÑÎ°¨ÌîÑÌä∏)
    # -----------------------------
    def generate_with_claude(self) -> str:
        """Claude-3.5 HaikuÎ°ú ÏµúÏ¢Ö Markdown Ìè¨Ïä§Ìä∏ ÏûëÏÑ±"""
        client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)

        prompt = f"""ÎãπÏã†ÏùÄ Ïä§ÌÉÄÌä∏ÏóÖ Ï∞ΩÏóÖÏûêÏôÄ Í∞úÎ∞úÏûêÎì§ÏùÑ ÏúÑÌïú AI Ìä∏Î†åÎìú Î∂ÑÏÑù Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§.
ÏïÑÎûò Îâ¥Ïä§Îì§ÏùÑ Î∞îÌÉïÏúºÎ°ú ÌïúÍµ≠Ïñ¥Î°ú Ïã¨ÎèÑ ÏûàÎäî Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏Î•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.

ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞:
{json.dumps(self.news_items, ensure_ascii=False, indent=2)}

ÏûëÏÑ± Í∞ÄÏù¥ÎìúÎùºÏù∏:
- Ï†ÑÏ≤¥ Î∂ÑÎüâ: 5,000-7,000Ïûê (Í≥µÎ∞± Ìè¨Ìï®)
- ÌÜ§: Ï†ÑÎ¨∏Ï†ÅÏù¥Î©¥ÏÑúÎèÑ ÏπúÍ∑ºÌïú ÎåÄÌôîÏ≤¥
- ÎèÖÏûê: ÌïúÍµ≠Ïùò Ïä§ÌÉÄÌä∏ÏóÖ Ï∞ΩÏóÖÏûê, CTO, Í∞úÎ∞úÏûê, ÌîÑÎ°úÎçïÌä∏ Îß§ÎãàÏ†Ä

Îâ¥Îãâ Ïä§ÌÉÄÏùº Ìë∏Ïãú Î©îÏãúÏßÄÏôÄ Ïã§Î¨¥ Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏöîÏïΩÏúºÎ°ú Ï†ïÎ¶¨Ìï¥Ï§ò.

ÌòïÏãùÏùÄ ÏïÑÎûòÏôÄ Í∞ôÏïÑ:
[ÏûÑÌå©Ìä∏ ÏûàÎäî Ï†úÎ™©]
(ÌïÑÏöîÌïòÎ©¥ Î∂ÄÏ†úÎèÑ Í¥úÏ∞ÆÏïÑ)
[Í∏∞ÏÇ¨ ÎÇ¥Ïö©Ïùò ÌïµÏã¨ÏùÑ ÏöîÏïΩÌïú Î≥∏Î¨∏.
 ÏπúÍ∑ºÌïú ÌÜ§Ïù¥ÏßÄÎßå Îß•ÎùΩÍ≥º ÏüÅÏ†êÏùÑ Î∂ÑÎ™ÖÌïòÍ≤å Ï†ïÎ¶¨ÌïòÍ≥†,
 ÏßßÏùÄ Îã®Î¨∏ÏúºÎ°ú ÌïµÏã¨ÏùÑ ÏûòÎùºÏ£ºÎäî Ïä§ÌÉÄÏùº.
 ÏÇ¨Ïã§Í¥ÄÍ≥Ñ + Îß•ÎùΩ ÏöîÏïΩÏù¥ Ï°∞ÌôîÎ°≠Í≤å ÏÑûÏó¨Ïïº Ìï¥.]

Ïã§Î¨¥ÏûêÎùºÎ©¥ Ïù¥Î†áÍ≤å Î¥êÏïº Ìï¥Ïöî

[Ïã§Î¨¥ ÏÉÅÌô© 1 - Ïñ¥ÎñªÍ≤å Ìï¥ÏÑùÌï† Ïàò ÏûàÎäîÏßÄ, Ïñ¥Îñ§ Ï§ÄÎπÑÍ∞Ä ÌïÑÏöîÌïúÏßÄ(ÏµúÎåÄÌïú ÏûêÏÑ∏ÌïòÍ≤å)]
[Ïã§Î¨¥ ÏÉÅÌô© 2 - Ïù¥Í±∏ Ïñ¥Îñ§ Í¥ÄÏ†êÏóêÏÑú ÌôúÏö©ÌïòÎ©¥ ÎèÑÏõÄÏù¥ ÎêòÎäîÏßÄ(ÏµúÎåÄÌïú ÏûêÏÑ∏ÌïòÍ≤å)]
[ÌäπÏ†ï ÌÉÄÍ≤ü(Ïòà: Ïä§ÌÉÄÌä∏ÏóÖ/Í∏∞ÌöçÏûê/Ìà¨ÏûêÏûê Îì±)Ïù¥ ÏñªÏùÑ Ïàò ÏûàÎäî ÍµêÌõàÏù¥ÎÇò Ï†ÑÎûµ]

Ìïú Ï§Ñ ÏöîÏïΩ
 [ÌïµÏã¨ Î©îÏãúÏßÄÎ•º Ïû¨Ïπò ÏûàÍ≤å Ï†ïÎ¶¨. Îß® Î∞ë ÏöîÏïΩÏùÄ ÏÑ†ÌÉùÏù¥ÏßÄÎßå ÏûàÏúºÎ©¥ Îçî Ï¢ãÏïÑÏöî.]
"""

        resp = client.messages.create(
            model="claude-3-5-haiku-20241022",
            max_tokens=8192,
            temperature=0.3,
            messages=[{"role": "user", "content": prompt}]
        )

        self.final_post = resp.content[0].text
        self.debug_info['claude_usage'] = {
            'input_tokens': resp.usage.input_tokens,
            'output_tokens': resp.usage.output_tokens,
        }
        return self.final_post

    # -----------------------------
    # 3) ÌååÏùº Ï†ÄÏû•
    # -----------------------------
    def save_to_file(self):
        timestamp = datetime.now().strftime('%Y%m%d_%H%M')
        md_name = f"blog_post_{timestamp}.md"
        with open(md_name, 'w', encoding='utf-8') as f:
            f.write(self.final_post)

        meta_name = f"metadata_{timestamp}.json"
        with open(meta_name, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': timestamp,
                'news_count': len(self.news_items),
                'final_length': len(self.final_post),
                'claude_usage': self.debug_info.get('claude_usage', {})
            }, f, ensure_ascii=False, indent=2)

        print(f"üìÑ {md_name} & {meta_name} Ï†ÄÏû• ÏôÑÎ£å")

    # -----------------------------
    # 4) Markdown ‚Üí HTML (Ìë∏ÌÑ∞Ïóê Ï∂úÏ≤ò Ìè¨Ìï®)
    # -----------------------------
    def _markdown_to_html(self, md: str, sources: List[str]) -> str:
        import re

        # Í∏∞Î≥∏ Markdown Î≥ÄÌôò (Îã®Ïàú Ï†ïÍ∑úÏãù)
        html = md
        html = re.sub(r'^### (.+)$', r'<h3>\1</h3>', html, flags=re.MULTILINE)
        html = re.sub(r'^## (.+)$', r'<h2>\1</h2>', html, flags=re.MULTILINE)
        html = re.sub(r'\*\*(.+?)\*\*', r'<strong>\1</strong>', html)
        html = re.sub(r'`([^`]+)`', r'<code>\1</code>', html)  # Ïù∏ÎùºÏù∏ ÏΩîÎìú
        html = re.sub(r'^- (.+)$', r'<li>\1</li>', html, flags=re.MULTILINE)
        html = re.sub(r'(<li>.*?</li>)', r'<ul>\1</ul>', html, flags=re.DOTALL)
        
        # Ï≤¥ÌÅ¨Î∞ïÏä§ Ï≤òÎ¶¨
        html = re.sub(r'- \[ \] (.+)$', r'<li><input type="checkbox" disabled> \1</li>', html, flags=re.MULTILINE)
        html = re.sub(r'- \[x\] (.+)$', r'<li><input type="checkbox" checked disabled> \1</li>', html, flags=re.MULTILINE)

        # Î¨∏Îã® ÎûòÌïë
        paragraphs = [p.strip() for p in html.split('\n\n') if p.strip()]
        html = '\n'.join(
            p if p.startswith('<') else f'<p>{p}</p>'
            for p in paragraphs
        )

        # Ï∂úÏ≤ò ÏÑπÏÖò
        src_html = '<h3>Ï∞∏Í≥† ÏûêÎ£å</h3><ol>' + ''.join(
            f'<li><a href="{u}" target="_blank">{u}</a></li>' for u in sources
        ) + '</ol>'

        # Ïä§ÌÉÄÏùº Ï†ÅÏö© (Í∞úÏÑ†Îêú ÎîîÏûêÏù∏)
        styled = f"""
        <!DOCTYPE html>
        <html lang=ko>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body{{
                    font-family: 'Pretendard', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
                    line-height: 1.8;
                    color: #2c3e50;
                    max-width: 750px;
                    margin: 0 auto;
                    padding: 40px 20px;
                    background: #f8f9fa;
                }}
                h1{{
                    color: #1a202c;
                    border-bottom: 3px solid #4299e1;
                    padding-bottom: 15px;
                    margin-bottom: 30px;
                    font-size: 32px;
                    font-weight: 700;
                }}
                h2{{
                    color: #2d3748;
                    margin-top: 45px;
                    margin-bottom: 25px;
                    font-size: 26px;
                    font-weight: 600;
                }}
                h3{{
                    color: #4a5568;
                    margin-top: 30px;
                    margin-bottom: 20px;
                    font-size: 20px;
                    font-weight: 600;
                }}
                strong{{
                    color: #e53e3e;
                    font-weight: 600;
                }}
                code{{
                    background: #e2e8f0;
                    padding: 2px 6px;
                    border-radius: 3px;
                    font-family: 'Consolas', 'Monaco', monospace;
                    font-size: 0.9em;
                }}
                p{{
                    margin: 20px 0;
                    text-align: justify;
                }}
                ul{{
                    margin: 20px 0;
                    padding-left: 30px;
                }}
                li{{
                    margin: 10px 0;
                }}
                a{{
                    color: #4299e1;
                    text-decoration: none;
                }}
                a:hover{{
                    text-decoration: underline;
                }}
                input[type="checkbox"]{{
                    margin-right: 8px;
                }}
                .footer{{
                    margin-top: 60px;
                    padding-top: 30px;
                    border-top: 1px solid #e2e8f0;
                    font-size: 14px;
                    color: #718096;
                    text-align: center;
                }}
            </style>
        </head>
        <body>
            <h1>AI Ìä∏Î†åÎìú Ïù∏ÏÇ¨Ïù¥Ìä∏</h1>
            {html}
            {src_html}
            <div class="footer">
                Generated by AI Trend Analyzer ‚Ä¢ {datetime.now().strftime('%YÎÖÑ %mÏõî %dÏùº %H:%M')}
            </div>
        </body>
        </html>"""
        return styled

    # -----------------------------
    # 5) Ïù¥Î©îÏùº Î∞úÏÜ°
    # -----------------------------
    def send_email(self):
        if not self.final_post:
            print("‚ö†Ô∏è  ÏµúÏ¢Ö Ìè¨Ïä§Ìä∏Í∞Ä ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§. Ïù¥Î©îÏùº Ï∑®ÏÜå")
            return

        html_body = self._markdown_to_html(self.final_post, self.sources)
        subject = f"[AI Ìä∏Î†åÎìú] {datetime.now().strftime('%m/%d')} Ïã§Î¨¥ Ïù∏ÏÇ¨Ïù¥Ìä∏"

        try:
            result = resend.Emails.send({
                "from": EMAIL_FROM,
                "to": EMAIL_TO,
                "subject": subject,
                "html": html_body,
                "text": self.final_post
            })
            print(f"‚úÖ Ïù¥Î©îÏùº Î∞úÏÜ° ÏôÑÎ£å: {result}")
        except Exception as e:
            print(f"‚ùå Ïù¥Î©îÏùº Î∞úÏÜ° Ïã§Ìå®: {e}")

    # -----------------------------
    # ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìñâ
    # -----------------------------
    def run(self):
        print("üöÄ AI Ìä∏Î†åÎìú Î∂ÑÏÑù ÏãúÏûë!")
        self.search_news_with_perplexity()
        self.generate_with_claude()
        # self.save_to_file()
        self.send_email()
        print("üéâ Î™®Îì† ÏûëÏóÖ ÏôÑÎ£å!")


if __name__ == "__main__":
    AITrendAnalyzer().run()